
# vulnerability_scanner.py - Advanced Vulnerability and Misconfiguration Scanning

import mysql.connector
import psycopg2
from db_connection import connect_mysql, connect_postgresql

# Example vulnerability checks
def check_password_policy(connection, db_type="mysql"):
    try:
        cursor = connection.cursor()
        if db_type == "mysql":
            cursor.execute("SELECT user, authentication_string FROM mysql.user WHERE LENGTH(authentication_string) < 8;")
        elif db_type == "postgresql":
            cursor.execute("SELECT usename, passwd FROM pg_shadow WHERE LENGTH(passwd) < 8;")
        weak_users = cursor.fetchall()
        if weak_users:
            print(f"[WARNING] Weak passwords found for users: {weak_users}")
    except Exception as e:
        print(f"[ERROR] Failed to check password policy: {e}")

def check_privilege_escalation_risks(connection, db_type="mysql"):
    try:
        cursor = connection.cursor()
        if db_type == "mysql":
            cursor.execute("SELECT user, host FROM mysql.user WHERE SUPER_PRIV='Y' AND user NOT IN ('root');")
        elif db_type == "postgresql":
            cursor.execute("SELECT usename FROM pg_user WHERE usesuper IS TRUE AND usename != 'postgres';")
        privileged_users = cursor.fetchall()
        if privileged_users:
            print(f"[WARNING] Privilege escalation risks found: {privileged_users}")
    except Exception as e:
        print(f"[ERROR] Failed to check privilege escalation risks: {e}")

def check_public_endpoint_exposure(connection, db_type="mysql"):
    try:
        cursor = connection.cursor()
        if db_type == "mysql":
            cursor.execute("SELECT user, host FROM mysql.user WHERE host = '%';")
        elif db_type == "postgresql":
            cursor.execute("SELECT usename, useconfig FROM pg_shadow WHERE useconfig @> '{host=%}';")
        public_access_users = cursor.fetchall()
        if public_access_users:
            print(f"[WARNING] Public access detected for users: {public_access_users}")
    except Exception as e:
        print(f"[ERROR] Failed to check public access exposure: {e}")

def check_ssl_tls_config(connection, db_type="mysql"):
    try:
        cursor = connection.cursor()
        if db_type == "mysql":
            cursor.execute("SHOW VARIABLES LIKE 'have_ssl';")
            ssl_status = cursor.fetchone()
            if ssl_status and ssl_status[1].lower() == "no":
                print("[WARNING] SSL/TLS is not enabled on MySQL.")
        elif db_type == "postgresql":
            cursor.execute("SHOW ssl;")
            ssl_status = cursor.fetchone()
            if ssl_status and ssl_status[0].lower() == "off":
                print("[WARNING] SSL/TLS is not enabled on PostgreSQL.")
    except Exception as e:
        print(f"[ERROR] Failed to check SSL/TLS configuration: {e}")

# Run all enhanced vulnerability checks
def run_advanced_vulnerability_checks():
    mysql_conn = connect_mysql()
    if mysql_conn:
        print("[INFO] Running checks on MySQL...")
        check_password_policy(mysql_conn, db_type="mysql")
        check_privilege_escalation_risks(mysql_conn, db_type="mysql")
        check_public_endpoint_exposure(mysql_conn, db_type="mysql")
        check_ssl_tls_config(mysql_conn, db_type="mysql")
        mysql_conn.close()

    pg_conn = connect_postgresql()
    if pg_conn:
        print("[INFO] Running checks on PostgreSQL...")
        check_password_policy(pg_conn, db_type="postgresql")
        check_privilege_escalation_risks(pg_conn, db_type="postgresql")
        check_public_endpoint_exposure(pg_conn, db_type="postgresql")
        check_ssl_tls_config(pg_conn, db_type="postgresql")
        pg_conn.close()

if __name__ == "__main__":
    run_advanced_vulnerability_checks()
